#!/usr/bin/env node

const pkg = require('./package');
var program = require('commander');
const http = require('http');

var Web3 = require('web3');

const abi = require('./bring_out_your_dead');

program
    .version(pkg.version)
    .option('--interval <seconds>', 'Frequency of polling for incoming requests')
    .option('--dispatch <address>', 'Address of the dispatch contract. Listening to events from here.')
    .option('--callback <callbackFunctionName>', 'Dispatch function')
    .option('--sender <address>', 'Address of the sender account. Sending transactions from here.')
    .option('--provider <RPC websocket address>', 'RPC websocket')
    .parse(process.argv);

if (program.dispatch === undefined) {
  console.error('Dispatch address is mandatory.');
  process.exit(1);
}

if (program.sender === undefined) {
  console.error('Sender account is mandatory.');
  process.exit(1);
}

const opts = {
  check_interval: (program.interval || 10) * 1000,
  dispatch_address: program.dispatch,
  sender_address: program.sender,
  callbackFunction: program.callback,
  provider: program.provider
};

console.log('Connecting to ' + opts.provider);
console.log('Interval: ' + opts.check_interval);
console.log('Dispatch: ' + opts.dispatch_address);
console.log('Sender:   ' + opts.sender_address);

var web3 = new Web3(
    new Web3.providers.WebsocketProvider(opts.provider)
);

web3.eth.getBlockNumber().then(console.log)
const bringOutYourDead = new web3.eth.Contract(abi, '0xdac3794d1644D7cE73d098C19f33E7e10271b2bC');

http.createServer(function (req, res) {
  const keystore = require('./oracle-keystore');
  const decryptedAccount = web3.eth.accounts.decrypt(keystore, 'EuAm77E4}P[&LH6HE64s');
  web3.eth.accounts.wallet.add(decryptedAccount.privateKey)

  let result;
  const tx = bringOutYourDead.methods.oracleCallback(true)
      .send({
        from: opts.sender_address,
        "gas": 200000,
        "chainId": 3,
      })
      .then(result => {
        res.writeHead(200);
        res.end("dead: " + deadStatus + "\n" + JSON.stringify(result, undefined,2));
      })
      .catch(result => {
        res.writeHead(300);
        res.end("error: " + JSON.stringify(result, undefined,2));
      });
}).listen(8000);